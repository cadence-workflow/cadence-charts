# -- Provide a name to override the name of the chart
nameOverride: ~
# -- Provide a name to override the full names of resources
fullnameOverride: ~

# Global configuration
global:
  # -- Global image configuration (shared only by Cadence Server services [frontend, worker, matching and history])
  image:
    repository: "docker.io/ubercadence/server"
    tag: "v1.3.6"
    pullPolicy: IfNotPresent

  # -- Image pull secrets for private registries
  imagePullSecrets: []
  # - name: myregistrykey

  # -- Global environment variables (shared only by Cadence Server services [frontend, worker, matching and history])
  env: []
  # - name: ENV_VAR
  #   value: "value"
  # Enable this variable if you are using Google Storage.
  # - name: GOOGLE_APPLICATION_CREDENTIALS
  #   value: "absolute/path/to/json/file"

  # -- Global secret environment variables (shared only by Cadence Server services [frontend, worker, matching and history])
  secretEnv: []
  # - name: GLOBAL_SECRET_ENV_VAR
  #   value: "value"
  # Enable this variables if you are using S3.
  # - name: AWS_ACCESS_KEY_ID
  #   value: "value"
  # - name: AWS_SECRET_ACCESS_KEY
  #   value: "value"
 
  # -- Global pod security context
  podSecurityContext: {}
    # runAsNonRoot: true
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- Global container security context
  containerSecurityContext: {}
    # allowPrivilegeEscalation: false
    # readOnlyRootFilesystem: true
    # capabilities:
    #   drop:
    #     - ALL

  # -- Global affinity rules
  affinity: {}

  # -- Global tolerations
  tolerations: []

  # -- Global node selector
  nodeSelector: {}

  # -- Global TLS volumes configuration
  tls:
    # -- Additional volumes for TLS certificates (The mode is important to have the minimum permissions)
    volumes: []
    # - name: multiple-ca-certs
    #   configMap:
    #     name: cassandra-ca-bundle
    #     items:
    #       - key: root-ca.crt
    #         path: root-ca.pem
    #       - key: intermediate-ca.crt
    #         path: intermediate-ca.pem
    # - name: example-tls-certs
    #   secret:
    #     secretName: example-crt-secret
    #     items:
    #       - key: ca.crt
    #         path: ca.pem
    #         mode: 0644 
    #       - key: tls.crt
    #         path: client.pem
    #         mode: 0644 
    #       - key: tls.key
    #         path: client-key.pem
    #         mode: 0600 

    # -- Volume mounts for TLS certificates
    volumeMounts: []
    # - name: example-tls-certs
    #   mountPath: /etc/cadence/ssl/
    #   readOnly: true

  # -- Global logging configuration (shared only by Cadence Server services [frontend, worker, matching and history])
  log:
    # -- Enable stdout logging
    stdout: true
    # -- Logging level (debug, info, warn, error)
    level: "info"

  # -- Global priority class name for pod scheduling
  priorityClassName: ""

  # -- Global topology spread constraints
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

# Frontend service configuration
frontend:
  # -- Image configuration (inherits from global if not specified)
  image: {}
    # repository: "docker.io/ubercadence/server"
    # tag: ""
    # pullPolicy: IfNotPresent
    # imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of frontend replicas to deploy
  replicas: 1

  # -- Tchannel port of cadence frontend service. DO NOT CHANGE
  port: 7933
  # -- GRPC port of cadence frontend service. DO NOT CHANGE
  grpcPort: 7833

  # -- Environment variables for frontend service
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Secret environment variables for frontend service
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for frontend service
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Resource limits and requests
  resources: {}
    # limits:
    #   cpu: "500m"
    #   memory: "1Gi"
    # requests:
    #   cpu: "500m"
    #   memory: "1Gi"

  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false # Usually false for single replica services
    minAvailable: 1
    # maxUnavailable: 1

  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}

  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}

  # -- Affinity rules (inherits from global if not specified)
  affinity: {}

  # -- Tolerations (inherits from global if not specified)
  tolerations: []

  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}

  # -- Additional pod annotations
  podAnnotations: {}

  # -- Additional pod labels
  podLabels: {}

  # -- Logging configuration (inherits from global log if not specified)
  log: {}
    # -- Enable stdout logging
    # stdout: true
    # -- Logging level (debug, info, warn, error)
    # level: "info"

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""

  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

# Matching service configuration
matching:
  # -- Image configuration (inherits from global if not specified)
  image: {}
    # repository: "docker.io/ubercadence/server"
    # tag: ""
    # pullPolicy: IfNotPresent
    # imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of matching replicas to deploy
  replicas: 1

  # -- Tchannel port of cadence matching service. DO NOT CHANGE
  port: 7935
  # -- GRPC port of cadence matching service. DO NOT CHANGE
  grpcPort: 7835

  # -- Environment variables for matching service
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Secret environment variables for matching service
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for matching service
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Resource limits and requests
  resources: {}
    # limits:
    #   cpu: "500m"
    #   memory: "1Gi"
    # requests:
    #   cpu: "500m"
    #   memory: "1Gi"

  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false # Recommended for multi-replica services
    minAvailable: 2
    # maxUnavailable: 1

  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}

  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}

  # -- Affinity rules (inherits from global if not specified)
  affinity: {}

  # -- Tolerations (inherits from global if not specified)
  tolerations: []

  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}

  # -- Additional pod annotations
  podAnnotations: {}

  # -- Additional pod labels
  podLabels: {}

  # -- Logging configuration (inherits from global log if not specified)
  log: {}
    # -- Enable stdout logging
    # stdout: true
    # -- Logging level (debug, info, warn, error)
    # level: "info"

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""

  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

# History service configuration
history:
  # -- Image configuration (inherits from global if not specified)
  image: {}
    # repository: "docker.io/ubercadence/server"
    # tag: ""
    # pullPolicy: IfNotPresent
    # imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of history replicas to deploy
  replicas: 1

  # -- Tchannel port of cadence history service. DO NOT CHANGE
  port: 7934
  # -- GRPC port of cadence history service. DO NOT CHANGE
  grpcPort: 7834

  # -- Environment variables for history service
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Secret environment variables for history service
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for history service
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Resource limits and requests
  resources: {}
    # limits:
    #   cpu: "500m"
    #   memory: "1Gi"
    # requests:
    #   cpu: "500m"
    #   memory: "1Gi"

  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false # Recommended for multi-replica services
    minAvailable: 2
    # maxUnavailable: 1

  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}

  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}

  # -- Affinity rules (inherits from global if not specified)
  affinity: {}

  # -- Tolerations (inherits from global if not specified)
  tolerations: []

  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}

  # -- Additional pod annotations
  podAnnotations: {}

  # -- Additional pod labels
  podLabels: {}

  # -- Logging configuration (inherits from global log if not specified)
  log: {}
    # -- Enable stdout logging
    # stdout: true
    # -- Logging level (debug, info, warn, error)
    # level: "info"

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""

  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

# Worker service configuration
worker:
  # -- Image configuration (inherits from global if not specified)
  image: {}
    # repository: "docker.io/ubercadence/server"
    # tag: ""
    # pullPolicy: IfNotPresent
    # imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of worker replicas to deploy
  replicas: 1

  # -- Tchannel port of cadence worker service. DO NOT CHANGE
  port: 7939

  # -- Environment variables for worker service
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Secret environment variables for worker service
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for worker service
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Resource limits and requests
  resources: {}
    # limits:
    #   cpu: "500m"
    #   memory: "1Gi"
    # requests:
    #   cpu: "500m"
    #   memory: "1Gi"

  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false  # Usually false for single replica services
    minAvailable: 1
    # maxUnavailable: 0

  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}

  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}

  # -- Affinity rules (inherits from global if not specified)
  affinity: {}

  # -- Tolerations (inherits from global if not specified)
  tolerations: []

  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}

  # -- Additional pod annotations
  podAnnotations: {}

  # -- Additional pod labels
  podLabels: {}

  # -- Logging configuration (inherits from global log if not specified)
  log: {}
    # -- Enable stdout logging
    # stdout: true
    # -- Logging level (debug, info, warn, error)
    # level: "info"

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""

  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

# Web UI configuration
web:
  # -- Image configuration for Web UI
  image:
    repository: "docker.io/ubercadence/web"
    tag: "v4.0.10"
    pullPolicy: IfNotPresent
    imagePullSecrets: []
      # - name: myregistrykey

  # -- Image configuration for BusyBox to check frontend service
  busybox:
    enabled: true
    image:
      repository: "busybox"
      tag: "latest"
      pullPolicy: IfNotPresent
      imagePullSecrets: []
        # - name: myregistrykey

  # -- Number of web UI replicas to deploy
  replicas: 1

  # -- Environment variables for web UI
  env:
  - name: CADENCE_WEB_PORT
    value: "8088"

  # -- Secret environment variables for web UI
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for web UI
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Resource limits and requests
  resources: {}
    # limits:
    #   cpu: "500m"
    #   memory: "1Gi"
    # requests:
    #   cpu: "500m"
    #   memory: "1Gi"

  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false # Usually false for single replica services
    minAvailable: 1
    # maxUnavailable: 0

  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}

  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}

  # -- Affinity rules (inherits from global if not specified)
  affinity: {}

  # -- Tolerations (inherits from global if not specified)
  tolerations: []

  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}

  # -- Additional pod annotations
  podAnnotations: {}

  # -- Additional pod labels
  podLabels: {}

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""

  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

  # Service configuration
  service:
    # -- Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    # -- Service port
    port: 8088
    # -- NodePort (only if type is NodePort)
    nodePort: ~
    # -- LoadBalancer IP (only if type is LoadBalancer)
    loadBalancerIP: ~
    # -- LoadBalancer source ranges (only if type is LoadBalancer)
    loadBalancerSourceRanges: []
    # -- Service annotations
    annotations: {}
      # service.beta.kubernetes.io/aws-load-balancer-type: nlb

  # Cadence web ingress configuration (if needed)
  ingress:
    # -- Enable ingress
    enabled: false
    # -- Ingress class name
    className: ""
    # -- Ingress annotations
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # -- Ingress hosts configuration
    hosts: []
      # - host: cadence.example.com
      #   paths:
      #     - path: /
      #       pathType: Prefix
    # -- TLS configuration
    tls: []
      # - secretName: cadence-web-tls
      #   hosts:
      #     - cadence.example.com

# Service Account configuration
serviceAccount:
  # -- Enable service account creation
  create: true
  # -- Service account name (generated if not set)
  name: ""
  # -- Annotations for service account
  annotations: {}
  # -- Automatically mount service account token
  automountServiceAccountToken: true

# RBAC configuration
rbac:
  # -- Enable RBAC creation
  create: false

# Network Policies
networkPolicy:
  # -- Enable network policies
  enabled: false
  # -- Ingress rules
  ingress: []
  # -- Egress rules
  egress: []

# Metrics configuration
metrics:
  # -- Enable metrics collection
  enabled: true
  # -- Metrics port
  port: 9090
  # -- Metrics port name
  portName: metrics

  # ServiceMonitor for Prometheus Operator
  serviceMonitor:
    # -- Enable ServiceMonitor creation
    enabled: false
    # -- Additional labels for ServiceMonitor
    additionalLabels: {}
    # -- Annotations for ServiceMonitor
    annotations: {}
    # -- Namespace for ServiceMonitor (defaults to release namespace)
    namespace: ""
    # -- Joblabel for ServiceMonitor
    jobLabel: ""
    # -- Namespace selector for ServiceMonitor
    namespaceSelector: []
    # -- Scrape interval
    scrapeInterval: 15s
    # -- Honor labels from target (False if it's commented | True if it's uncomment)
    # honorLabels: true
    # -- Target labels to be added
    targetLabels: []
    # -- Relabeling configs
    relabelings: []
    # -- Metric relabeling configs
    metricRelabelings: []

# HorizontalPodAutoscaler configuration
autoscaling:
  # -- Enable HPA for frontend service
  frontend:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    # behavior:
    #   scaleDown:
    #     stabilizationWindowSeconds: 300
    #     policies:
    #     - type: Percent
    #       value: 50
    #       periodSeconds: 60
    #   scaleUp:
    #     stabilizationWindowSeconds: 60
    #     policies:
    #     - type: Percent
    #       value: 100
    #       periodSeconds: 15

  # -- Enable HPA for matching service
  matching:
    enabled: false
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  # -- Enable HPA for history service
  history:
    enabled: false
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  # -- Enable HPA for worker service
  worker:
    enabled: false
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

#############################################
########### CADENCE CONFIGURATION ###########
#############################################
config:
  # Log configuration
  log:
    # -- Enable stdout logging (inherits from global.log if not specified)
    stdout: ~
    # -- Logging level: debug, info, warn, error (inherits from global.log if not specified)
    level: ~
    # -- Output file path for logging (if stdout is false)
    outputFile: ""
    # -- Log level key name (defaults to "level")
    levelKey: level
    # -- Log encoding format: json, console (defaults to "json")
    encoding: json
    # -- Allow using environment variables for log configuration. If enabled, it will use ENV variable of each server component.
    useEnvVars: false
  
  # Ringpop configuration for service discovery
  ringpop:
    # -- Ringpop cluster name
    name: "cadence"
    # -- Bootstrap mode: dns, hosts, file
    bootstrapMode: "dns"
    # -- Maximum duration to wait for joining the ring
    maxJoinDuration: "30s"

  # Persistence configuration
  persistence:
    # -- Number of history shards for partitioning (CANNOT BE CHANGED ONCE SET)
    numHistoryShards: 4
    # -- Name of the default datastore
    defaultStore: "default"
    # -- Name of the visibility datastore (basic visibility)
    visibilityStore: "visibility"
    # -- Name of the advanced visibility datastore
    advancedVisibilityStore: "es-visibility"
    # -- Enable persistence latency histogram metrics
    enablePersistenceLatencyHistogramMetrics: false

    # Database configuration
    database:
      # -- Database driver: cassandra, mysql, postgres
      driver: "cassandra"

      # Common SQL configuration (applies to both MySQL and PostgreSQL)
      sql:
        # -- Database host. Can reference Kubernetes services
        hosts: "mysql-service.mysql-namespace.svc.cluster.local"
        # -- Database port (will use driver default if not specified)
        port: null
        # -- Database name for main data
        dbname: "cadence"
        # -- Database name for visibility data
        visibilityDbname: "cadence_visibility"
        # -- Database username
        user: "cadence"
        # -- Database password
        password: ""
        # -- Maximum number of connections
        maxConns: 20
        # -- Maximum number of idle connections
        maxIdleConns: 20
        # -- Maximum connection lifetime
        maxConnLifetime: "1h"
        # -- Number of database shards (default: 1)
        numShards: 1
        # -- Encoding type for SQL blobs
        encodingType: "thriftrw"
        # -- Decoding types for SQL blobs
        decodingTypes: ["thriftrw"]
        # -- Use multiple databases for sharding
        useMultipleDatabases: false
        # -- Multiple databases configuration (when useMultipleDatabases is true)
        multipleDatabasesConfig: []
        # -- Connection attributes (key-value pairs for connection string)
        connectAttributes: {}
        # TLS configuration for SQL databases
        tls:
          # -- Enable TLS
          enabled: false
          # -- SSL mode (for PostgreSQL: disable, allow, prefer, require, verify-ca, verify-full)
          # -- For MySQL: false, true, skip-verify, preferred
          sslMode: ""
          # -- Path to CA certificate file
          caFile: ""
          # -- Multiple CA certificate files
          caFiles: []
          # -- Path to client certificate file
          certFile: ""
          # -- Path to client private key file
          keyFile: ""
          # -- Enable hostname verification (inverse of skipHostVerification)
          enableHostVerification: true
          # -- Require client authentication for mutual TLS
          requireClientAuth: false
          # -- Server name for certificate verification
          serverName: ""

      # MySQL-specific configuration
      mysql:
        # -- Default port for MySQL (overrides sql.port if specified)
        port: 3306
        # -- Enable transaction isolation compatibility mode
        txIsolationCompat: false

      # PostgreSQL-specific configuration
      postgres:
        # -- Default port for PostgreSQL (overrides sql.port if specified)
        port: 5432

      # Cassandra configuration
      cassandra:
        # -- Cassandra hosts. Can reference Kubernetes services
        hosts: "cadence-release-cassandra.cadencetest.svc.cluster.local"
        # -- Cassandra port
        port: 9042
        # -- Cassandra keyspace for main data
        keyspace: "cadence"
        # -- Cassandra keyspace for visibility data
        visibilityKeyspace: "cadence_visibility"
        # -- Number of replicas of cassandra deployed to ensure reliability and fault tolerance across the cluster
        replicationFactor: 1
        # -- Cassandra username
        user: "cassandra"
        # -- Cassandra password
        password: "cassandra"
        # -- Cassandra protocol version
        protoVersion: 4
        # -- AWS region filter for Cassandra (if using AWS Keyspaces)
        region: ""
        # -- Datacenter filter for Cassandra (Used for schema setup too)
        datacenter: ""
        # -- Maximum number of connections
        maxConns: 10
        # -- Connection timeout
        connectTimeout: "10s"
        # -- Query timeout
        timeout: "1s"
        # -- Default consistency level
        consistency: "LOCAL_QUORUM"
        # -- Serial consistency level
        serialConsistency: "LOCAL_SERIAL"
        # -- Host selection policy
        hostSelectionPolicy: "tokenaware,roundrobin"
        # -- Allowed authenticators for custom authentication
        allowedAuthenticators: []
        # -- Additional connection attributes
        connectAttributes: {}
        # TLS configuration for Cassandra
        tls:
          # -- Enable TLS
          enabled: false
          # -- CA certificate file to verify server certificates
          caFile: ""
          # -- Multiple CA certificate files (alternative to caFile)
          caFiles: []
          # -- Client certificate file for mutual TLS
          certFile: ""
          # -- Client private key file for mutual TLS
          keyFile: ""
          # -- Verify server hostname matches certificate
          enableHostVerification: true
          # -- Require client certificate authentication
          requireClientAuth: false
          # -- Override server name for certificate verification
          serverName: "localhost"

    # Elasticsearch configuration for advanced visibility
    elasticsearch:
      # -- Enable Elasticsearch for advanced visibility
      enabled: false
      # -- Elasticsearch version (v6, use v7 for v7 or higher)
      version: "v7"
      # -- Elasticsearch username
      user: ""
      # -- Elasticsearch password
      password: ""
      # -- Protocol to use (http/https). If not specified, auto-detected based on TLS settings
      protocol: ""
      # -- Elasticsearch host.
      hosts: "elasticsearch-service.elastic-namespace.svc.cluster.local"
      # -- Elasticsearch port
      port: 9200
      # -- Elasticsearch visibility index name
      visibilityIndex: "cadence-visibility"
      # -- Enable AWS signing (for AWS Elasticsearch)
      awsSigning:
        enabled: false
        region: ""
        service: "es"
      # TLS configuration for ElasticSearch
      tls:
        # -- Enable TLS
        enabled: false
        # -- CA certificate file to verify server certificates
        caFile: ""
        # -- Multiple CA certificate files (alternative to caFile)
        caFiles: []
        # -- Client certificate file for mutual TLS
        certFile: ""
        # -- Client private key file for mutual TLS
        keyFile: ""
        # -- Verify server hostname matches certificate
        enableHostVerification: true
        # -- Require client certificate authentication
        requireClientAuth: false
        # -- Override server name for certificate verification
        serverName: ""
  
  # Cluster configuration
  cluster:
    # -- Version increment used during cluster failover operations
    failoverVersionIncrement: 10
    # -- Name of the primary cluster in a multi-cluster setup
    primaryClusterName: "cluster0"
    # -- Name of the current cluster
    currentClusterName: "cluster0"
    # -- Whether this cluster is not the primary cluster
    isNotPrimary: false
    # -- RPC transport protocol (grpc or tchannel)
    rpcTransport: "grpc"
    # -- Initial failover version for this cluster
    initialFailoverVersion: 0
    # -- Cluster group configuration with additional clusters (this override the default cluster)
    clusterGroup:
      # Example of additional cluster configuration:
      # cluster0:
      #   enabled: true
      #   initialFailoverVersion: 0
      #   rpcAddress: "cadence-cluster1.example.com:7933"
      #   rpcTransport: "grpc"
      # cluster1:
      #   enabled: true
      #   initialFailoverVersion: 0
      #   rpcAddress: "cadence-cluster1.example.com:7933"
      #   rpcTransport: "grpc"
    # -- Cluster redirection policy for cross-cluster operations
    clusterRedirectionPolicy:
      # -- Policy for handling cross-cluster requests (noop, selected-apis-forwarding, all-domain-apis-forwarding, selected-apis-forwarding-v2)
      policy: "noop"
  
  # Services configuration
  services:
    # -- gRPC max message size
    grpcMaxMsgSize: 4194304  # 4MB

    # Metrics configuration
    metrics:
      # -- Metrics type: statsd, prometheus
      type: "prometheus"
      # StatsD configuration
      statsd:
        # -- StatsD endpoint. Can reference Kubernetes services
        endpoint: ""
        # -- Metric prefixes for each service
        prefixes:
          frontend: "cadence-frontend"
          matching: "cadence-matching"
          history: "cadence-history"
          worker: "cadence-worker"
      # Prometheus configuration
      prometheus:
        # -- Timer type: histogram, summary
        timerType: "histogram"
    
    # Pprof configuration
    pprof:
      # -- Enable pprof endpoints
      enabled: false
      # -- Pprof ports for each service
      ports:
        frontend: 6060
        matching: 6061
        history: 6062
        worker: 6063

  # Kafka configuration for async workflows
  kafka:
    # -- Enable Kafka for async workflows
    enabled: false
    # -- Kafka broker service. Can reference Kubernetes services
    brokers: "kafka-service.kafka-namespace.svc.cluster.local"
    # -- Kafka port
    port: 9092
    # -- Kafka visibility topic name
    visibilityTopic: "cadence-visibility"
    # -- Kafka visibility DLQ topic name
    visibilityDLQTopic: "cadence-visibility-dlq"
    # -- Topic properties (optional)
    topicProperties: {}
    # TLS configuration for Kafka
    tls:
      # -- Enable TLS
      enabled: false
      # -- CA certificate file to verify server certificates
      caFile: ""
      # -- Multiple CA certificate files (alternative to caFile)
      caFiles: []
      # -- Client certificate file for mutual TLS
      certFile: ""
      # -- Client private key file for mutual TLS
      keyFile: ""
      # -- Verify server hostname matches certificate
      enableHostVerification: true
      # -- Require client certificate authentication
      requireClientAuth: false
      # -- Override server name for certificate verification
      serverName: ""
    # SASL configuration
    sasl:
      # -- Enable SASL authentication
      enabled: false
      # -- SASL mechanism: plain, sha512 or sha256
      mechanism: "PLAIN"
      # -- SASL username
      username: ""
      # -- SASL password
      password: ""
  
  # Archival configuration
  archival:
    # History archival configuration
    history:
      # -- Archival status: enabled, disabled, paused
      status: "disabled"
      # -- Enable reading from archives
      enableRead: false
      # -- Archive providers configuration
      provider:
        # -- Storage type: filestore, s3, gcs
        type: "filestore"
        # Filestore archiver
        filestore:
          # -- File mode for archived files
          fileMode: "0644"
          # -- Directory mode for archive directories
          dirMode: "0755"
        # S3 archiver
        # - Documentation for S3 here: https://github.com/cadence-workflow/cadence/blob/v1.3.0/common/archiver/s3store/README.md
        s3store:
          # -- AWS region
          region: ""
          # -- S3 endpoint (for S3-compatible storage)
          endpoint: ""
          # -- Force path style URLs
          s3ForcePathStyle: false
        # Google Cloud Storage archiver
        # - Documentation for GStorage here: https://github.com/cadence-workflow/cadence/blob/v1.3.0/common/archiver/gcloud/README.md
        gstorage:
          # -- Path to service account key file
          credentialsPath: ""
    
    # Visibility archival configuration
    visibility:
      # -- Archival status: enabled, disabled, paused
      status: "disabled"
      # -- Enable reading from archives
      enableRead: false
      # -- Archive providers configuration
      provider:
        # -- Storage type: filestore, s3, gcs
        type: "filestore"
        # Filestore archiver
        filestore:
          # -- File mode for archived files
          fileMode: "0644"
          # -- Directory mode for archive directories
          dirMode: "0755"
        # S3 archiver
        # - Documentation for S3 here: https://github.com/cadence-workflow/cadence/blob/v1.3.0/common/archiver/s3store/README.md
        s3store:
          # -- AWS region
          region: ""
          # -- S3 endpoint (for S3-compatible storage)
          endpoint: ""
          # -- Force path style URLs
          s3ForcePathStyle: false
        # Google Cloud Storage archiver
        # - Documentation for GStorage here: https://github.com/cadence-workflow/cadence/blob/v1.3.0/common/archiver/gcloud/README.md
        gstorage:
          # -- Path to service account key file
          credentialsPath: ""

  # Domain defaults configuration
  domainDefaults:
    # -- Default archival settings for new domains
    # - Documentation for S3 here: https://github.com/cadence-workflow/cadence/blob/v1.3.0/common/archiver/s3store/README.md
    # - Documentation for GStorage here: https://github.com/cadence-workflow/cadence/blob/v1.3.0/common/archiver/gcloud/README.md
    archival:
      history:
        # -- Default history archival status: enabled, disabled
        status: "disabled"
        # -- Default history archival URI
        URI: ""
      visibility:
        # -- Default visibility archival status: enabled, disabled
        status: "disabled"
        # -- Default visibility archival URI
        URI: ""
  
  # Blobstore configuration
  blobstore:
    # Filestore blobstore
    filestore:
      # -- Output directory for blob storage
      outputDirectory: "/etc/cadence/blobstore"
  
  # Public client configuration
  publicClient:
    # -- Frontend service address (defaults to current cluster's RPC address)
    hostPort: ""
    # -- Transport protocol: grpc, tchannel
    transport: "grpc"
    # -- DNS refresh interval
    refreshInterval: "10s"
  
  # Dynamic configuration
  dynamicConfig:
    # -- Dynamic config client type: noop, filebased, configstore
    client: "filebased"
    # File-based dynamic config
    filebased:
      # -- Path to dynamic config file
      filepath: "/etc/cadence/config/dynamicconfig/config.yaml"
      # -- Poll interval for config changes
      pollInterval: "60s"
  
  # Async workflow queues configuration
  # This is not operative yet. It will be in next releases.
  asyncWorkflowQueues:
    # -- Enable async workflow queues
    enabled: false
    # -- Async workflow queue providers
    default-queue:
      # -- Queue type: kafka
      type: "kafka"
      # -- Queue configuration
      config:
        # -- Kafka topic for async workflows
        topic: "cadence-async-wf"
        # -- Kafka cluster reference
        cluster: "default"

# Dynamic configuration
dynamicConfig:
  # -- Dynamic config values to be set in the Cadence server
  # List of keys can be found at https://pkg.go.dev/github.com/uber/cadence/common/dynamicconfig/dynamicproperties
  values:
    system.minRetentionDays:
    - value: 0
      constraints: {}
    # Visibility write have to be set in funtion of advanced visibility or not. See https://pkg.go.dev/github.com/uber/cadence/common/dynamicconfig/dynamicproperties#WriteVisibilityStoreName for more information.
    system.writeVisibilityStoreName:
      - value: "db"
    # Visibility read have to be set in funtion of advanced visibility or not. See https://pkg.go.dev/github.com/uber/cadence/common/dynamicconfig/dynamicproperties#ReadVisibilityStoreName for more information.
    system.readVisibilityStoreName:
      - value: "db"

###############################################################
#################### SCHEMA CONFIGURATION #####################
###############################################################
schema:
  # Schema validation and deployment configuration
  # This job validates and updates the database schema safely:
  # - Won't replace existing databases
  # - Won't rollback schema versions to prevent data loss
  # - Will update schema version if updates are available
  # All schema parameters are taken from .Values.config
  
  # -- Schema job for main database schema management
  serverJob:
    # -- Enable server schema job
    enabled: true
    # -- Schema job resource allocation
    resources: {}
      # limits:
      #   cpu: "500m"
      #   memory: "1Gi"
      # requests:
      #   cpu: "500m"
      #   memory: "1Gi"
    # -- Schema job affinity rules
    affinity: {}
    # -- Schema job tolerations
    tolerations: []
    # -- Schema job node selector
    nodeSelector: {}

  # -- ElasticSearch schema job configuration
  elasticSearchJob:
    # -- Enable ElasticSearch schema job
    enabled: true
    # -- ElasticSearch schema job resource allocation
    resources: {}
      # limits:
      #   cpu: "500m"
      #   memory: "1Gi"
      # requests:
      #   cpu: "500m"
      #   memory: "1Gi"
    # -- ElasticSearch schema job affinity rules
    affinity: {}
    # -- ElasticSearch schema job tolerations
    tolerations: []
    # -- ElasticSearch schema job node selector
    nodeSelector: {}

  # -- Container images for schema validation
  checkSchema:
    # -- Cassandra schema validation image
    cassandra:
      image:
        repository: "cassandra"
        tag: "4"
        pullPolicy: IfNotPresent
    # -- MySQL schema validation image
    mysql:
      image:
        repository: "alpine/mysql"
        tag: "latest"
        pullPolicy: IfNotPresent
    # -- PostgreSQL schema validation image
    postgres:
      image:
        repository: "alpine/psql"
        tag: "latest"
        pullPolicy: IfNotPresent
    # -- ElasticSearch schema validation image
    elasticsearch:
      image:
        repository: alpine/curl
        tag: "latest"
        pullPolicy: IfNotPresent

##################################################################
#################### DATABASE CONFIGURATION ######################
##################################################################
# Database deployment configuration
# Enable only if you want to deploy the database components from this chart
# For production environments, consider using external managed databases

# Cassandra database configuration
# ref: https://github.com/bitnami/charts/tree/main/bitnami/cassandra
# More documentation: https://artifacthub.io/packages/helm/bitnami/cassandra
cassandra:
  # -- Enable Cassandra database deployment
  enabled: true

  image:
    # registry: docker.io
    repository: bitnamilegacy/cassandra
    # tag:

  # -- Number of Cassandra replicas
  replicaCount: 1

  # Database user configuration
  dbUser:
    # -- Cassandra username
    user: cassandra
    # -- Force password setting
    forcePassword: false
    # -- Cassandra password (leave empty for auto-generation)
    password: "cassandra"

  # Cassandra cluster configuration
  cluster:
    # -- Cassandra cluster name
    name: cassandra
    # -- Number of seed nodes
    seedCount: 1
    # -- Number of tokens per node
    numTokens: 256
    # -- Datacenter name
    datacenter: dc1
    # -- Rack name
    rack: rack1
    # -- Endpoint snitch strategy
    endpointSnitch: SimpleSnitch

  # JVM configuration
  jvm:
    # -- Additional JVM options
    extraOpts: ""
    # -- Maximum heap size (auto-calculated if empty)
    maxHeapSize: ""
    # -- New generation heap size (auto-calculated if empty)
    newHeapSize: ""

  # -- Cassandra resource allocation
  resources: {}
    # limits:
    #   cpu: "500m"
    #   memory: "1Gi"
    # requests:
    #   cpu: "500m"
    #   memory: "1Gi"

  # Persistence configuration
  persistence:
    # -- Enable persistent storage
    enabled: false
    # -- Use existing persistent volume claim
    existingClaim: ""
    # -- Storage class for data volume
    storageClass: ""
    # -- Storage class for commit log volume
    commitStorageClass: ""
    # -- Persistent volume annotations
    annotations: {}
    # -- Persistent volume access modes
    accessModes:
      - ReadWriteOnce
    # -- Data volume size
    size: 8Gi
    # -- Commit log volume size
    commitLogsize: 2Gi

  # TLS configuration
  tls:
    # -- Internode encryption level (none, all, dc, rack)
    internodeEncryption: none
    # -- Enable client-to-node encryption
    clientEncryption: false
    # -- Auto-generate TLS certificates
    autoGenerated: false
    # -- Existing secret with TLS certificates
    existingSecret: ""
    # -- Secret containing TLS passwords
    passwordsSecret: ""
    # -- Keystore password
    keystorePassword: ""
    # -- Truststore password
    truststorePassword: ""
    # -- Secret containing TLS certificates
    certificatesSecret: ""
    # -- TLS encryption secret name
    tlsEncryptionSecretName: ""
    # -- Resource preset for TLS containers
    resourcesPreset: "nano"

# PostgreSQL database configuration
# ref: https://github.com/bitnami/charts/tree/main/bitnami/postgresql
# More documentation: https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  # -- Enable PostgreSQL database deployment
  enabled: false

  image:
    # registry: docker.io
    repository: bitnamilegacy/postgresql
    # tag:

  # Authentication configuration
  auth:
    # -- Enable postgres admin user
    enablePostgresUser: true
    # -- Password for postgres admin user (leave empty for auto-generation)
    postgresPassword: ""
    # -- Custom username to create
    username: ""
    # -- Password for custom user (leave empty for auto-generation)
    password: ""
    # -- Custom database name to create
    database: ""

  # Primary database configuration
  primary:
    # -- Primary database resource allocation
    # resources:
    #   requests:
    #     cpu: 2
    #     memory: 512Mi
    #   limits:
    #     cpu: 3
    #     memory: 1024Mi
    
    # Persistence configuration
    persistence:
      # -- Enable PostgreSQL primary data persistence using PVC
      enabled: true
      # -- Volume name to assign
      volumeName: "data"
      # -- Use existing persistent volume claim
      existingClaim: ""
      # -- Volume mount path
      mountPath: /bitnami/postgresql
      # -- Volume subdirectory to mount
      subPath: ""
      # -- Storage class for PostgreSQL primary data volume
      storageClass: ""
      # -- PVC access modes for PostgreSQL volume
      accessModes:
        - ReadWriteOnce
      # -- PVC storage request size
      size: 8Gi
      # -- PVC annotations
      annotations: {}
      # -- PVC labels
      labels: {}
      # -- Selector to match existing Persistent Volume
      selector: {}
      # -- Custom PVC data source
      dataSource: {}

  # TLS configuration
  tls:
    # -- Enable TLS traffic support
    enabled: false
    # -- Auto-generate self-signed TLS certificates
    autoGenerated: false
    # -- Use server's TLS cipher preferences over client's
    preferServerCiphers: true
    # -- Secret containing TLS certificates
    certificatesSecret: ""
    # -- Certificate filename
    certFilename: ""
    # -- Certificate key filename
    certKeyFilename: ""
    # -- CA certificate filename for client authentication
    certCAFilename: ""
    # -- Certificate Revocation List filename
    crlFilename: ""

# MySQL database configuration
# ref: https://github.com/bitnami/charts/tree/main/bitnami/mysql
# More documentation: https://artifacthub.io/packages/helm/bitnami/mysql
mysql:
  # -- Enable MySQL database deployment
  enabled: false

  image:
    # registry: docker.io
    repository: bitnamilegacy/mysql
    # tag:

  # Authentication configuration
  auth:
    # -- Password for root user (leave empty for auto-generation)
    rootPassword: ""
    # -- Create the configured database
    createDatabase: true
    # -- Database name to create
    database: "my_database"
    # -- Custom username to create
    username: ""
    # -- Password for custom user (leave empty for auto-generation)
    password: ""
    # -- MySQL replication username
    replicationUser: replicator
    # -- MySQL replication user password (leave empty for auto-generation)
    replicationPassword: ""
    # -- Use existing secret for passwords
    # Secret must contain keys: mysql-root-password, mysql-replication-password, mysql-password
    existingSecret: ""
    # -- Mount credentials as files instead of environment variables
    usePasswordFiles: true

  # Primary database configuration
  primary:
    # -- Primary database resource allocation
    # resources:
    #   requests:
    #     cpu: 2
    #     memory: 512Mi
    #   limits:
    #     cpu: 3
    #     memory: 1024Mi
    
    # Persistence configuration
    persistence:
      # -- Enable persistence using PersistentVolumeClaim
      enabled: true
      # -- Use existing PersistentVolumeClaim
      existingClaim: ""
      # -- Volume subdirectory to mount
      subPath: ""
      # -- Storage class for MySQL primary persistent volume
      storageClass: ""
      # -- Persistent volume claim annotations
      annotations: {}
      # -- Persistent volume access modes
      accessModes:
        - ReadWriteOnce
      # -- Persistent volume size
      size: 8Gi
      # -- Selector to match existing Persistent Volume
      selector: {}

  # TLS configuration
  tls:
    # -- Enable TLS support
    enabled: false
    # -- Secret containing TLS certificates
    existingSecret: ""
    # -- Certificate filename
    certFilename: tls.crt
    # -- Certificate key filename
    certKeyFilename: tls.key
    # -- CA certificate filename
    certCAFilename: ""
    # -- CA certificate content
    ca: ""
    # -- Certificate content
    cert: ""
    # -- Private key content
    key: ""
    # Automatic certificate generation
    autoGenerated:
      # -- Enable automatic certificate generation
      enabled: true
      # -- Certificate generation mechanism (helm, cert-manager)
      engine: helm