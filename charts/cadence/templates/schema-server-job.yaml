{{- if .Values.schema.serverJob.enabled -}}
{{- $dbDriver := .Values.config.persistence.database.driver }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cadence.fullname" . }}-schema-server
  labels:
    {{- include "cadence.labels" . | nindent 4 }}
    app.kubernetes.io/component: schema-server
spec:
  ttlSecondsAfterFinished: 60
  template:
    metadata:
      labels:
        {{- include "cadence.labels" . | nindent 8 }}
        app.kubernetes.io/component: schema-server
    spec:
      {{- if $.Values.serviceAccount.create }}
      serviceAccountName: {{ include "cadence.serviceAccountName" $ }}
      {{- end }}
      {{- $globalImagePullSecrets := $.Values.global.imagePullSecrets | default list }}
      {{- $schemaImagePullSecrets := $.Values.frontend.imagePullSecrets | default list }}
      {{- $mergedImagePullSecrets := concat $globalImagePullSecrets $schemaImagePullSecrets }}
      {{- if $mergedImagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $mergedImagePullSecrets | nindent 8 }}
      {{- end }}
      {{- $globalNodeSelector := $.Values.global.nodeSelector | default dict }}
      {{- $schemaNodeSelector := $.Values.schema.serverJob.nodeSelector | default $globalNodeSelector }}
      {{- if $schemaNodeSelector }}
      nodeSelector:
        {{- toYaml $schemaNodeSelector | nindent 8 }}
      {{- end }}
      {{- $globalAffinity := $.Values.global.affinity | default dict }}
      {{- $schemaAffinity := $.Values.schema.serverJob.affinity | default $globalAffinity }}
      {{- if $schemaAffinity }}
      affinity:
        {{- toYaml $schemaAffinity | nindent 8 }}
      {{- end }}
      {{- $globalTolerations := $.Values.global.tolerations | default list }}
      {{- $schemaTolerations := $.Values.schema.serverJob.tolerations | default $globalTolerations }}
      {{- if $schemaTolerations }}
      tolerations:
        {{- toYaml $schemaTolerations | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-database
        {{- if eq $dbDriver "cassandra" }}
        image: {{ $.Values.schema.checkSchema.cassandra.image.repository }}:{{ $.Values.schema.checkSchema.cassandra.image.tag }}
        imagePullPolicy: {{ $.Values.schema.checkSchema.cassandra.image.pullPolicy }}
        command:
          - sh
          - -c
          - |
            # Create .cassandra directory for cqlshrc if it doesn't exist
            mkdir -p ~/.cassandra

            # Build cqlshrc configuration file
            cat > ~/.cassandra/cqlshrc << EOF
            [connection]
            hostname = $DB_HOST
            port = $DB_PORT

            EOF

            # Add authentication section if user is provided
            if [ -n "$DB_USER" ] && [ "$DB_USER" != "" ]; then
              cat >> ~/.cassandra/cqlshrc << EOF
            [authentication]
            username = $DB_USER
            EOF
              # Add password if provided
              if [ -n "$CASSANDRA_PASSWORD" ] && [ "$CASSANDRA_PASSWORD" != "" ]; then
                cat >> ~/.cassandra/cqlshrc << EOF
            password = $CASSANDRA_PASSWORD
            EOF
                  fi
                fi

            # Add SSL configuration if enabled
            if [ "$TLS_ENABLED" = "true" ]; then
              cat >> ~/.cassandra/cqlshrc << EOF

            [ssl]
            EOF
              # Add certificate file if specified (CA certificate)
              if [ -n "$SSL_CERTFILE" ] && [ "$SSL_CERTFILE" != "" ]; then
                cat >> ~/.cassandra/cqlshrc << EOF
            certfile = $SSL_CERTFILE
            EOF
              fi
              
              # Add client certificate for mutual TLS
              if [ -n "$SSL_CLIENT_CERT" ] && [ "$SSL_CLIENT_CERT" != "" ]; then
                cat >> ~/.cassandra/cqlshrc << EOF
            usercert = $SSL_CLIENT_CERT
            EOF
              fi
              
              # Add client private key for mutual TLS
              if [ -n "$SSL_CLIENT_KEY" ] && [ "$SSL_CLIENT_KEY" != "" ]; then
                cat >> ~/.cassandra/cqlshrc << EOF
            userkey = $SSL_CLIENT_KEY
            EOF
              fi
              
              # Add validate setting
              if [ -n "$SSL_VALIDATE" ] && [ "$SSL_VALIDATE" != "" ]; then
                cat >> ~/.cassandra/cqlshrc << EOF
            validate = $SSL_VALIDATE
            EOF
              else
                cat >> ~/.cassandra/cqlshrc << EOF
            validate = true
            EOF
              fi
            fi

            # Debug: Show generated cqlshrc (remove in production)
            echo "Generated cqlshrc:"
            cat ~/.cassandra/cqlshrc
            echo "---"

            # Build cqlsh command
            build_cqlsh_cmd() {
              local cmd="cqlsh"
              
              # Add SSL option if enabled
              if [ "$TLS_ENABLED" = "true" ]; then
                cmd="$cmd --ssl"
              fi
              
              echo "$cmd"
            }

            # Compare database version with cadence schema version
            until $(build_cqlsh_cmd) -e "
              SELECT now() FROM system.local;" > /dev/null 2>&1
            do
              echo 'Waiting for Cassandra to be ready...'
              sleep 5
            done
            echo "Cassandra is ready!"
        env:
        - name: ES_ENABLED
          value: {{ $.Values.config.persistence.elasticsearch.enabled | quote }}
        # Basic connection parameters
        - name: DB_HOST
          value: {{ $.Values.config.persistence.database.cassandra.hosts | quote }}
        - name: DB_PORT
          value: {{ $.Values.config.persistence.database.cassandra.port | quote }}
        - name: DB_NAME
          value: {{ $.Values.config.persistence.database.cassandra.keyspace | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ $.Values.config.persistence.database.cassandra.visibilityKeyspace | quote }}
        # Authentication parameters (conditional)
        {{- if $.Values.config.persistence.database.cassandra.user }}
        - name: DB_USER
          value: {{ $.Values.config.persistence.database.cassandra.user | quote }}
        {{- end }}
        {{- if $.Values.config.persistence.database.cassandra.password }}
        - name: CASSANDRA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: CASSANDRA_PASSWORD
        {{- end }}
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ $.Values.config.persistence.database.cassandra.tls.enabled | quote }}
        {{- if $.Values.config.persistence.database.cassandra.tls.enabled }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if $.Values.config.persistence.database.cassandra.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ $.Values.config.persistence.database.cassandra.tls.caFile | quote }}
        {{- else if $.Values.config.persistence.database.cassandra.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index $.Values.config.persistence.database.cassandra.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if $.Values.config.persistence.database.cassandra.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ $.Values.config.persistence.database.cassandra.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if $.Values.config.persistence.database.cassandra.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ $.Values.config.persistence.database.cassandra.tls.keyFile | quote }}
        {{- end }}
        # SSL_VALIDATE environment variable
        - name: SSL_VALIDATE
          value: {{ $.Values.config.persistence.database.cassandra.tls.enableHostVerification | quote }}
        {{- end }}
        {{- else if eq $dbDriver "postgres" }}
        image: {{ $.Values.schema.checkSchema.postgres.image.repository }}:{{ $.Values.schema.checkSchema.postgres.image.tag }}
        imagePullPolicy: {{ $.Values.schema.checkSchema.postgres.image.pullPolicy }}
        command:
          - sh
          - -c
          - |
            # Set up PostgreSQL environment variables
            export PGPASSWORD="$POSTGRES_PWD"

            # Add SSL mode if TLS is enabled
            if [ "$TLS_ENABLED" = "true" ] && [ -n "$SSL_MODE" ]; then
              # Set SSL mode as environment variable (psql reads PGSSLMODE)
              export PGSSLMODE="$SSL_MODE"
              
              # Add SSL certificate parameters as environment variables if provided
              if [ -n "$SSL_CERTFILE" ]; then
                export PGSSLROOTCERT="$SSL_CERTFILE"
              fi
              
              if [ -n "$SSL_CLIENT_CERT" ]; then
                export PGSSLCERT="$SSL_CLIENT_CERT"
              fi
              
              if [ -n "$SSL_CLIENT_KEY" ]; then
                export PGSSLKEY="$SSL_CLIENT_KEY"
              fi
            else
              # Disable SSL if TLS is not enabled
              export PGSSLMODE="disable"
            fi

            # Wait for PostgreSQL to be ready with authentication and TLS
            echo "Waiting for PostgreSQL to be ready..."
            until psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "SELECT 1" >/dev/null 2>&1; do
              echo 'PostgreSQL is not ready yet...'
              sleep 5
            done
            echo "PostgreSQL is ready!"
        env:
        - name: ES_ENABLED
          value: {{ $.Values.config.persistence.elasticsearch.enabled | quote }}
        # Basic connection parameters
        - name: DB_HOST
          value: {{ $.Values.config.persistence.database.sql.hosts | quote }}
        - name: DB_PORT
          value: {{ $.Values.config.persistence.database.postgres.port | default $.Values.config.persistence.database.sql.port | default 5432 | quote }}
        - name: DB_NAME
          value: {{ $.Values.config.persistence.database.sql.dbname | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ $.Values.config.persistence.database.sql.visibilityDbname | quote }}
        - name: DB_USER
          value: {{ $.Values.config.persistence.database.sql.user | quote }}
        # Authentication parameters
        - name: POSTGRES_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: POSTGRES_PWD
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ $.Values.config.persistence.database.sql.tls.enabled | quote }}
        {{- if $.Values.config.persistence.database.sql.tls.enabled }}
        # SSL Mode
        - name: SSL_MODE
          value: {{ $.Values.config.persistence.database.sql.tls.sslMode | default "require" | quote }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if $.Values.config.persistence.database.sql.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ $.Values.config.persistence.database.sql.tls.caFile | quote }}
        {{- else if $.Values.config.persistence.database.sql.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index $.Values.config.persistence.database.sql.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if $.Values.config.persistence.database.sql.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ $.Values.config.persistence.database.sql.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if $.Values.config.persistence.database.sql.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ $.Values.config.persistence.database.sql.tls.keyFile | quote }}
        {{- end }}
        {{- end }}
        {{- else if eq $dbDriver "mysql" }}
        image: {{ $.Values.schema.checkSchema.mysql.image.repository }}:{{ $.Values.schema.checkSchema.mysql.image.tag }}
        imagePullPolicy: {{ $.Values.schema.checkSchema.mysql.image.pullPolicy }}
        command:
          - sh
          - -c
          - |
            # Build connection string based on TLS configuration
            build_mysql_cmd() {
              local cmd="mariadb -h $DB_HOST -P $DB_PORT -u $DB_USER -p$MYSQL_PWD"
              
              # Add SSL parameters if TLS is enabled
              if [ "$TLS_ENABLED" = "true" ]; then
                case "$SSL_MODE" in
                  "disable"|"false")
                    cmd="$cmd --skip-ssl"
                    ;;
                  "preferred")
                    ;;
                  "required"|"true"|"skip-verify")
                    cmd="$cmd --ssl --ssl-verify-server-cert=off"
                    ;;
                  "verify-ca")
                    cmd="$cmd --ssl --ssl-verify-server-cert"
                    ;;
                  "verify-identity")
                    cmd="$cmd --ssl --ssl-verify-server-cert"
                    ;;
                  *)
                    cmd="$cmd --ssl"
                    ;;
                esac
                
                # Add SSL certificate parameters if provided
                if [ -n "$SSL_CERTFILE" ]; then
                  cmd="$cmd --ssl-ca=$SSL_CERTFILE"
                fi
                
                if [ -n "$SSL_CLIENT_CERT" ]; then
                  cmd="$cmd --ssl-cert=$SSL_CLIENT_CERT"
                fi
                
                if [ -n "$SSL_CLIENT_KEY" ]; then
                  cmd="$cmd --ssl-key=$SSL_CLIENT_KEY"
                fi
              else
                cmd="$cmd --skip-ssl"
              fi
              
              echo "$cmd"
            }

            # Wait for MySQL to be ready
            echo "Waiting for MySQL to be ready..."
            until $(build_mysql_cmd) -e "SELECT 1" >/dev/null 2>&1; do
              echo 'MySQL is not ready yet...'
              sleep 5
            done
            echo "MySQL is ready!"
        env:
        - name: ES_ENABLED
          value: {{ $.Values.config.persistence.elasticsearch.enabled | quote }}
        # Basic connection parameters
        - name: DB_HOST
          value: {{ $.Values.config.persistence.database.sql.hosts | quote }}
        - name: DB_PORT
          value: {{ $.Values.config.persistence.database.mysql.port | default $.Values.config.persistence.database.sql.port | default 3306 | quote }}
        - name: DB_NAME
          value: {{ $.Values.config.persistence.database.sql.dbname | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ $.Values.config.persistence.database.sql.visibilityDbname | quote }}
        - name: DB_USER
          value: {{ $.Values.config.persistence.database.sql.user | quote }}
        # Authentication parameters
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: MYSQL_PWD
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ $.Values.config.persistence.database.sql.tls.enabled | quote }}
        {{- if $.Values.config.persistence.database.sql.tls.enabled }}
        # SSL Mode
        - name: SSL_MODE
          value: {{ $.Values.config.persistence.database.sql.tls.sslMode | default "require" | quote }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if $.Values.config.persistence.database.sql.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ $.Values.config.persistence.database.sql.tls.caFile | quote }}
        {{- else if $.Values.config.persistence.database.sql.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index $.Values.config.persistence.database.sql.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if $.Values.config.persistence.database.sql.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ $.Values.config.persistence.database.sql.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if $.Values.config.persistence.database.sql.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ $.Values.config.persistence.database.sql.tls.keyFile | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
        {{- with $.Values.global.tls.volumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
      - name: cadence-schema-server
        {{- $globalImage := .Values.global.image | default dict }}
        {{- $schemaImage := $.Values.frontend.image | default dict }}
        {{- $repository := $schemaImage.repository | default $globalImage.repository }}
        {{- $tag := $schemaImage.tag | default $globalImage.tag }}
        image: {{ $repository }}:{{ $tag }}
        {{- $pullPolicy := $schemaImage.pullPolicy | default $globalImage.pullPolicy | default "IfNotPresent" }}
        imagePullPolicy: {{ $pullPolicy }}
        {{- if eq $dbDriver "cassandra" }}
        # Cassandra Schema Setup
        command:
          - sh
          - -c
          - |
            set -e
            echo "Starting Cadence schema setup for driver: $DB_DRIVER"
            echo "=== Setting up Cassandra Schema ==="
            
            # Build cassandra-tool command with TLS options
            build_cassandra_cmd() {
              local cmd="cadence-cassandra-tool --ep $DB_HOST"
              
              # Add authentication
              if [ -n "$DB_USER" ]; then
                cmd="$cmd -u $DB_USER"
              fi
              if [ -n "$CASSANDRA_PASSWORD" ]; then
                cmd="$cmd -pw $CASSANDRA_PASSWORD"
              fi

              # Add protocol version
              cmd="$cmd -pv $PROTOCOL_VERSION"

              # Add allowed authenticators from environment variable
              if [ -n "$ALLOWED_AUTHENTICATORS" ]; then
                cmd="$cmd $ALLOWED_AUTHENTICATORS"
              fi
              
              # Add TLS options if enabled
              if [ "$TLS_ENABLED" = "true" ]; then
                cmd="$cmd --tls"
                if [ -n "$SSL_CERTFILE" ]; then
                  cmd="$cmd --tls-ca-file $SSL_CERTFILE"
                fi
                if [ -n "$SSL_CLIENT_CERT" ]; then
                  cmd="$cmd --tls-cert-file $SSL_CLIENT_CERT"
                fi
                if [ -n "$SSL_CLIENT_KEY" ]; then
                  cmd="$cmd --tls-key-file $SSL_CLIENT_KEY"
                fi
              fi
              
              echo "$cmd"
            }
            
            # Setup main database schema
            echo "Creating main keyspace: $DB_NAME"
            if [ "$DATA_CENTER" = "" ]; then
              $(build_cassandra_cmd) create -k $DB_NAME --rf $REPLICATION_FACTOR
            else
              $(build_cassandra_cmd) create -k $DB_NAME --rf $REPLICATION_FACTOR -dc $DATA_CENTER
            fi

            echo "Setting up main schema version 0.0"
            $(build_cassandra_cmd) -k $DB_NAME setup-schema -v 0.0 || echo "Schema already exists"
            
            echo "Updating main schema to latest version"
            $(build_cassandra_cmd) -k $DB_NAME update-schema -d $CADENCE_HOME/schema/cassandra/cadence/versioned || echo "Rollback is not allowed"
            
            # Setup visibility database schema (only if ES is not enabled)
            if [ "$ES_ENABLED" = "false" ]; then
              echo "Creating visibility keyspace: $DB_VISIBILITY_NAME"
              if [ "$DATA_CENTER" = "" ]; then
                $(build_cassandra_cmd) create -k $DB_VISIBILITY_NAME --rf $REPLICATION_FACTOR
              else
                $(build_cassandra_cmd) create -k $DB_VISIBILITY_NAME --rf $REPLICATION_FACTOR -dc $DATA_CENTER
              fi

              echo "Setting up visibility schema version 0.0"
              $(build_cassandra_cmd) -k $DB_VISIBILITY_NAME setup-schema -v 0.0 || echo "Schema already exists"
              
              echo "Updating visibility schema to latest version"
              $(build_cassandra_cmd) -k $DB_VISIBILITY_NAME update-schema -d $CADENCE_HOME/schema/cassandra/visibility/versioned || echo "Rollback is not allowed"
            else
              echo "Skipping visibility schema setup (Elasticsearch enabled)"
            fi

            echo "Schema setup completed successfully!"
        env:
        # Common environment variables
        - name: DB_DRIVER
          value: {{ $dbDriver | quote }}
        - name: CADENCE_HOME
          value: "/etc/cadence"
        - name: ES_ENABLED
          value: {{ .Values.config.persistence.elasticsearch.enabled | quote }}
        # Cassandra specific environment variables
        - name: DB_HOST
          value: {{ .Values.config.persistence.database.cassandra.hosts | quote }}
        - name: DB_NAME
          value: {{ .Values.config.persistence.database.cassandra.keyspace | quote }}
        - name: PROTOCOL_VERSION
          value: {{ .Values.config.persistence.database.cassandra.protoVersion | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ .Values.config.persistence.database.cassandra.visibilityKeyspace | quote }}
        - name: REPLICATION_FACTOR
          value: {{ .Values.config.persistence.database.cassandra.replicationFactor | default 1 | quote }}
        - name: DATA_CENTER
          value: {{ .Values.config.persistence.database.cassandra.datacenter | quote }}
        # Allowed authenticators (build --aa parameters)
        - name: ALLOWED_AUTHENTICATORS
          value: {{ if .Values.config.persistence.database.cassandra.allowedAuthenticators }}{{ range $index, $auth := .Values.config.persistence.database.cassandra.allowedAuthenticators }}{{ if $index }} {{ end }}--aa {{ $auth | quote }}{{ end }}{{ else }}"--aa org.apache.cassandra.auth.PasswordAuthenticator"{{ end }}
        # Authentication parameters (conditional)
        {{- if .Values.config.persistence.database.cassandra.user }}
        - name: DB_USER
          value: {{ .Values.config.persistence.database.cassandra.user | quote }}
        {{- end }}
        {{- if .Values.config.persistence.database.cassandra.password }}
        - name: CASSANDRA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: CASSANDRA_PASSWORD
        {{- end }}
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ .Values.config.persistence.database.cassandra.tls.enabled | quote }}
        {{- if .Values.config.persistence.database.cassandra.tls.enabled }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if .Values.config.persistence.database.cassandra.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ .Values.config.persistence.database.cassandra.tls.caFile | quote }}
        {{- else if .Values.config.persistence.database.cassandra.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index .Values.config.persistence.database.cassandra.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if .Values.config.persistence.database.cassandra.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ .Values.config.persistence.database.cassandra.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if .Values.config.persistence.database.cassandra.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ .Values.config.persistence.database.cassandra.tls.keyFile | quote }}
        {{- end }}
        - name: CASSANDRA_TLS_SERVER_NAME
          value: {{ .Values.config.persistence.database.cassandra.tls.serverName | quote }}
        {{- end }}
    
        {{- else if eq $dbDriver "postgres" }}
        # PostgreSQL Schema Setup
        command:
          - sh
          - -c
          - |
            set -e
            echo "Starting Cadence schema setup for driver: $DB_DRIVER"
            echo "=== Setting up PostgreSQL Schema ==="
            
            # Build sql-tool command with TLS options
            build_postgres_cmd() {
              local cmd="cadence-sql-tool --ep $DB_HOST -p $DB_PORT -u $DB_USER -pw $POSTGRES_PWD --plugin postgres"
              
              # Add TLS options if enabled
              if [ "$TLS_ENABLED" = "true" ]; then
                cmd="$cmd --tls"
                if [ -n "$SSL_CERTFILE" ]; then
                  cmd="$cmd --tls-ca-file $SSL_CERTFILE"
                fi
                if [ -n "$SSL_CLIENT_CERT" ]; then
                  cmd="$cmd --tls-cert-file $SSL_CLIENT_CERT"
                fi
                if [ -n "$SSL_CLIENT_KEY" ]; then
                  cmd="$cmd --tls-key-file $SSL_CLIENT_KEY"
                fi
              fi
              
              echo "$cmd"
            }
            
            # Create main database
            echo "Creating main database: $DB_NAME"
            $(build_postgres_cmd) create-database --db $DB_NAME
            
            echo "Setting up main schema version 0.0"
            $(build_postgres_cmd) --db $DB_NAME setup-schema -v 0.0 || echo "Schema already exists"
            
            echo "Updating main schema to latest version"
            $(build_postgres_cmd) --db $DB_NAME update-schema -d $CADENCE_HOME/schema/postgres/cadence/versioned || echo "Rollback is not allowed"
            
            # Setup visibility database (only if ES is not enabled)
            if [ "$ES_ENABLED" = "false" ]; then
              echo "Creating visibility database: $DB_VISIBILITY_NAME"
              $(build_postgres_cmd) create-database --db $DB_VISIBILITY_NAME
              
              echo "Setting up visibility schema version 0.0"
              $(build_postgres_cmd) --db $DB_VISIBILITY_NAME setup-schema -v 0.0 || echo "Schema already exists"
              
              echo "Updating visibility schema to latest version"
              $(build_postgres_cmd) --db $DB_VISIBILITY_NAME update-schema -d $CADENCE_HOME/schema/postgres/visibility/versioned || echo "Rollback is not allowed"
            else
              echo "Skipping visibility schema setup (Elasticsearch enabled)"
            fi

            echo "Schema setup completed successfully!"
        env:
        # Common environment variables
        - name: DB_DRIVER
          value: {{ $dbDriver | quote }}
        - name: CADENCE_HOME
          value: "/etc/cadence"
        - name: ES_ENABLED
          value: {{ .Values.config.persistence.elasticsearch.enabled | quote }}
        # PostgreSQL specific environment variables
        - name: DB_HOST
          value: {{ .Values.config.persistence.database.sql.hosts | quote }}
        - name: DB_PORT
          value: {{ .Values.config.persistence.database.postgres.port | default .Values.config.persistence.database.sql.port | default 5432 | quote }}
        - name: DB_NAME
          value: {{ .Values.config.persistence.database.sql.dbname | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ .Values.config.persistence.database.sql.visibilityDbname | quote }}
        - name: DB_USER
          value: {{ .Values.config.persistence.database.sql.user | quote }}
        # Authentication parameters
        - name: POSTGRES_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: POSTGRES_PWD
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ .Values.config.persistence.database.sql.tls.enabled | quote }}
        {{- if .Values.config.persistence.database.sql.tls.enabled }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if .Values.config.persistence.database.sql.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ .Values.config.persistence.database.sql.tls.caFile | quote }}
        {{- else if .Values.config.persistence.database.sql.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index .Values.config.persistence.database.sql.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if .Values.config.persistence.database.sql.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ .Values.config.persistence.database.sql.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if .Values.config.persistence.database.sql.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ .Values.config.persistence.database.sql.tls.keyFile | quote }}
        {{- end }}
        {{- end }}

        {{- else if eq $dbDriver "mysql" }}
        # MySQL Schema Setup
        command:
          - sh
          - -c
          - |
            set -e
            echo "Starting Cadence schema setup for driver: $DB_DRIVER"
            echo "=== Setting up MySQL Schema ==="
            
            # Build sql-tool command with TLS options
            build_mysql_cmd() {
              local cmd="cadence-sql-tool --ep $DB_HOST -p $DB_PORT -u $DB_USER -pw $MYSQL_PWD --plugin mysql"
              
              # Add TLS options if enabled
              if [ "$TLS_ENABLED" = "true" ]; then
                cmd="$cmd --tls"
                if [ -n "$SSL_CERTFILE" ]; then
                  cmd="$cmd --tls-ca-file $SSL_CERTFILE"
                fi
                if [ -n "$SSL_CLIENT_CERT" ]; then
                  cmd="$cmd --tls-cert-file $SSL_CLIENT_CERT"
                fi
                if [ -n "$SSL_CLIENT_KEY" ]; then
                  cmd="$cmd --tls-key-file $SSL_CLIENT_KEY"
                fi
              fi
              
              echo "$cmd"
            }
            
            # Create main database
            echo "Creating main database: $DB_NAME"
            $(build_mysql_cmd) create-database --db $DB_NAME || echo "Database already exists"
            
            echo "Setting up main schema version 0.0"
            $(build_mysql_cmd) --db $DB_NAME setup-schema -v 0.0 || echo "Schema already exists"
            
            echo "Updating main schema to latest version"
            $(build_mysql_cmd) --db $DB_NAME update-schema -d $CADENCE_HOME/schema/mysql/v8/cadence/versioned || echo "Rollback is not allowed"
            
            # Setup visibility database (only if ES is not enabled)
            if [ "$ES_ENABLED" = "false" ]; then
              echo "Creating visibility database: $DB_VISIBILITY_NAME"
              $(build_mysql_cmd) create-database --db $DB_VISIBILITY_NAME || echo "Database already exists"
              
              echo "Setting up visibility schema version 0.0"
              $(build_mysql_cmd) --db $DB_VISIBILITY_NAME setup-schema -v 0.0 || echo "Schema already exists"
              
              echo "Updating visibility schema to latest version"
              $(build_mysql_cmd) --db $DB_VISIBILITY_NAME update-schema -d $CADENCE_HOME/schema/mysql/v8/visibility/versioned || echo "Rollback is not allowed"
            else
              echo "Skipping visibility schema setup (Elasticsearch enabled)"
            fi
            
            echo "Schema setup completed successfully!"
        env:
        # Common environment variables
        - name: DB_DRIVER
          value: {{ $dbDriver | quote }}
        - name: CADENCE_HOME
          value: "/etc/cadence"
        - name: ES_ENABLED
          value: {{ .Values.config.persistence.elasticsearch.enabled | quote }}
        # MySQL specific environment variables
        - name: DB_HOST
          value: {{ .Values.config.persistence.database.sql.hosts | quote }}
        - name: DB_PORT
          value: {{ .Values.config.persistence.database.mysql.port | default .Values.config.persistence.database.sql.port | default 3306 | quote }}
        - name: DB_NAME
          value: {{ .Values.config.persistence.database.sql.dbname | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ .Values.config.persistence.database.sql.visibilityDbname | quote }}
        - name: DB_USER
          value: {{ .Values.config.persistence.database.sql.user | quote }}
        # Authentication parameters
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: MYSQL_PWD
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ .Values.config.persistence.database.sql.tls.enabled | quote }}
        {{- if .Values.config.persistence.database.sql.tls.enabled }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if .Values.config.persistence.database.sql.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ .Values.config.persistence.database.sql.tls.caFile | quote }}
        {{- else if .Values.config.persistence.database.sql.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index .Values.config.persistence.database.sql.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if .Values.config.persistence.database.sql.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ .Values.config.persistence.database.sql.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if .Values.config.persistence.database.sql.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ .Values.config.persistence.database.sql.tls.keyFile | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
        {{- with .Values.global.tls.volumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.schema.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      volumes:
      {{- with .Values.global.tls.volumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
{{- end }}